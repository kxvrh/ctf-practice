# RSA
# 已知多组n, c, 求解最大公约数, 可能为p或q

import gmpy2
from Crypto.Util.number import long_to_bytes
from Crypto.PublicKey import RSA


def gcd(a, b):
    # 求解最大公因数 
    if b == 0:
        return a
    else:
        return gcd(b, a % b)

e = 65537

n1 = 0xb7f1577a0d6f9453a8e9c08b66f591bcfc6ab9943b33092456eaa91c647d12fee0b161c104906fb154c3f938116fd3145287e42d3d69caf5b61dd9662b5442c5bc57a38e02a8817eca83145fb3e8efb2ec2c3cf610deb1441d520fabf7f67e7079ed16d309d62e5dfcf52a9f0467ad28d1397bc124c7fbc7b602b6445a3f4a93747e5647ca9152070f715e47a73e2da658f385d1d308a072d05f0028840d0a1e7da00c2ccf59d6dcf37c672253750859b6babab6f0b1092096baa15959a7854b4303731b1d13bd4f47c047454d4b62fe4526df7a29ee86bf50bdf989b092ba779aeef2f8d6b0ae0b96862e1f50a44daac0fb4461cde49b1dd57444640db613c9 
c1 = 0x4cd7facf25216fca407b97969d027df099c30233761411fc33a4716d2407d6d17020d1c3bdea84906caf564cdf4ffc8421a5728584f77ad9a59c0d02c989045212e2bfcac07fb7aa975ec9c3ba54a8c49980667df3971616197719330c87faa193d409b6a5a86e45b72ec2d0987567c64ba8fa3ca397b68c6358c36f125df4b4fab4b8dcfd00e2c64de01d8ee7b4e2576b7f586dd760ed962a08040384925454763237a3556ba6de5000b3e893188fe8b5b7fc18e77935a7e853e54ee5f5b3071ca14ed8faa8629fdbe003a7573df0ceca33c0edfcc51d27b5b1d673acc288d93ffcf612b1440a27c106892d27eca997e71af63cb7b995a4cdadc8c5357667e1

n2 = 0xb35d7377b6a968e7b33ee58546d4a590786d52841515c65969162b89f2c09a1dd7271821ae9e90eebcecae9aaeb649dde73aa2cfdca234746c570e45419a959b375b897e2cdbb03fb284f327fd5a932c0f61fdac469c8c73d269422507a3e651feb626fc5a653960f2f12081c9bb5d50b4455dd4dc94a0b801bbae7a8caf7261e433339c9bf8aecb78d5ab32d66563ecd4ba126600d176f5f431b6bfa2846a1fb06772d637dfa328ec99b0bee514aa38f8d92282dda463721eba3dfb1132f0d66665a3d276540ff74d19a1aa2b484afa5cca9afe75eff602e8bb3f88f1508ce092e8b4edb7b26ad66443281105c205d60bb0927e7899b0b66d569b37c4859677
c2 = 0xa27ec0440540d73eb664ab48628448b044f083fee1505e6c8777838828ae6843036b7a35f8eeb04bb84e5c252f1485b9d01479528c4f85df770d93ac4b20f34a2216e1a92e1d2a34d4e79a040a39c31bda7fc0a91454133d18260e63e0df4ed9b07ea4a14f1e5aa4dd8e2b3b28fdf6398ab8c71d5c97100c8bc1163989c3113ceed1fdebd6a7ac887884b945539ed3b26ec8977514ba9cf7f6ae4c09900fee5d82fd394ac9acd08cb8acb59fdef55c88544d5ce116e013b3ba6c7130e50d6316d468ee8c6c25ab562a55bfa3654221b04ce90e5b795ac746eb96c99d7fe2781846baeb06d1c56751104e9ade62877a4bf69505d12c2cc3ff7b6201bb65fe2f94

P = gcd(n1, n2)
# print(P)
# P = 138376604533530412400239558340424700312412702699022481119357799054715877829291635290832719835033140580690053865677079316241919169166375123691917675235979462772103681398725285808551041924624882840901583892858174270714471366531758975241868470938138238307005782651296179579961869801841395682782645916848523771439
Q1 = n1 // P
Q2 = n2 // P

Z1 = (P-1) * (Q1-1)
Z2 = (P-1) * (Q2-1)

d1 = gmpy2.invert(e, int(Z1))
d2 = gmpy2.invert(e, int(Z2))

m1 = gmpy2.powmod(c1, d1, n1)
m2 = gmpy2.powmod(c2, d2, n2)

print(long_to_bytes(m1))
print(long_to_bytes(m2))