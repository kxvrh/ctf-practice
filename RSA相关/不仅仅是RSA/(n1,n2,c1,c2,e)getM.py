# 模不互素
# 已知: 公钥e相同, n1,n2,c1,c2, 求解最大公约数, 可能为p或q

import gmpy2
from Crypto.Util.number import long_to_bytes
from Crypto.PublicKey import RSA


# http://www.hiencode.com/pub_asys.html分析公钥得e, n
e1 = 41221
n1 = 10285341668836655607404515118077620322010982612318568968318582049362470680277495816958090140659605052252686941748392508264340665515203620965012407552377979
e2 = 41221
n2 = 8559553750267902714590519131072264773684562647813990967245740601834411107597211544789303614222336972768348959206728010238189976768204432286391096419456339

e = 41221


# morse code reader从.wav读取密文
# kali: morse2ascii C1.wav
c1 = 4314251881242803343641258350847424240197348270934376293792054938860756265727535163218661012756264314717591117355736219880127534927494986120542485721347351
c2 = 485162209351525800948941613977942416744737316759516157292410960531475083863663017229882430859161458909478412418639172249660818299099618143918080867132349



P = gmpy2.gcd(n1, n2)

Q1 = n1 // P
Q2 = n2 // P

Z1 = (P-1) * (Q1-1)
Z2 = (P-1) * (Q2-1)

d1 = gmpy2.invert(e, int(Z1))
d2 = gmpy2.invert(e, int(Z2))

m1 = gmpy2.powmod(c1, d1, n1)
m2 = gmpy2.powmod(c2, d2, n2)

print(long_to_bytes(m1))
print(long_to_bytes(m2))