# RSA已知n, 密文c, 公钥e, 求明文

import gmpy2
from Crypto.Util.number import long_to_bytes
from Crypto.PublicKey import RSA

N = 2277984791022346369005533904783614818826102788659651508959767202083843778453131366658916382803461140562467908905967443285040501371560088604538394878005827646410146244954745505114406792711000349929611271710262426493710967674490536959788665890671796421985910748091011210709414415838780453626144971988788672588103654983

# 通过分解n的质因数得到素数p q
p = 
q = 
# 公钥e
e = 65537

n = p * q
z = (p-1) * (q-1)

# 私钥d
d = gmpy2.invert(e, z)
print(d)

c = 415510106371698055042355817455792784402467839071261284227679808181073943762112386236619891503158397068812942349049185918370823556100880803528976860244812587012654626659823858350868438615582709075400040571632681052556974452098591809573228654622307014559692352778252371646024960520522510301144376842967556042367321117

# 明文m
m = gmpy2.powmod(c, d, n)
print(long_to_bytes(m))